% Parameters
parameters beta sigma alpha delta phi;
beta  = 0.98;		% discount factor
sigma = 1.0;		% CRRA coefficient
alpha = 0.3;		% capital share
delta = 0.04;		% depreciation rate
phi = 0.5;          % adj. cost parameter

% Exogenous States (make sure kronecker product works fine)
var_shock z_agg z_ind_1 z_ind_2 z_ind_3 z_ind_4 z_ind_5;
shock_num = 2^6;
z_agg_vals = [0.8, 1.2];
z_ind_vals = [0.9, 1.1];
% z = flipud(combvec(z_ind_vals, z_ind_vals, z_ind_vals, z_ind_vals, z_ind_vals, z_agg_vals))
%z_agg = z(1,:)
%z_ind_1 = z(2,:)
%z_ind_2 = z(3,:)
%z_ind_3 = z(4,:)
%z_ind_4 = z(5,:)
%z_ind_5 = z(6,:)

[z_ind_1, z_ind_2, z_ind_3, z_ind_4, z_ind_5, z_agg] = ndgrid(z_ind_vals, z_ind_vals, z_ind_vals, z_ind_vals, z_ind_vals, z_agg_vals)
z_agg = z_agg(:)'
z_ind_1 = z_ind_1(:)'
z_ind_2 = z_ind_2(:)'
z_ind_3 = z_ind_3(:)'
z_ind_4 = z_ind_4(:)'
z_ind_5 = z_ind_5(:)'

Pr_agg_ll = 0.95;  Pr_agg_hh  = 0.95;
Pr_ind_ll = 0.9;  Pr_ind_hh  = 0.9;
shock_trans_agg = [
  Pr_agg_ll, 1-Pr_agg_ll
  1-Pr_agg_hh, Pr_agg_hh
  ];
shock_trans_ind = [
  Pr_ind_ll, 1-Pr_ind_ll
  1-Pr_ind_hh, Pr_ind_hh
  ];
%try to loop it
shock_trans = kron(kron(kron(kron(kron(shock_trans_agg, shock_trans_ind),shock_trans_ind), shock_trans_ind),shock_trans_ind), shock_trans_ind);

% Endogenous States (make sure steady state is fine)
var_state K_1 K_2 K_3 K_4 K_5 ;
Kss  = (alpha * beta / (phi*delta*5*(1-beta*(1-delta))))^(1/(2-alpha));
KPts = 5;
KMin = Kss*0.5;
KMax = Kss*1.5;
K_1    = linspace(KMin,KMax,KPts);
K_2    = linspace(KMin,KMax,KPts);
K_3    = linspace(KMin,KMax,KPts);
K_4    = linspace(KMin,KMax,KPts);
K_5    = linspace(KMin,KMax,KPts);

% Interp
var_interp s_1_interp s_2_interp s_3_interp s_4_interp s_5_interp;
initial s_1_interp 0.15;
initial s_2_interp 0.15;
initial s_3_interp 0.15;
initial s_4_interp 0.15;
initial s_5_interp 0.15;
% Time iterations update
s_1_interp = s_1;
s_2_interp = s_2;
s_3_interp = s_3;
s_4_interp = s_4;
s_5_interp = s_5;

% Endogenous variables as unknowns of equations
var_policy s_1 s_2 s_3 s_4 s_5 K_1_next K_2_next K_3_next K_4_next K_5_next ;
inbound s_1       0 1;
inbound s_2       0 1;
inbound s_3       0 1;
inbound s_4       0 1;
inbound s_5       0 1;
inbound K_1_next  0 ((2/phi)*z_agg.*z_ind_1.*K_1.^alpha).^(1/2)+(1-delta)*K_1;
inbound K_2_next  0 ((2/phi)*z_agg.*z_ind_2.*K_2.^alpha).^(1/2)+(1-delta)*K_2;
inbound K_3_next  0 ((2/phi)*z_agg.*z_ind_3.*K_3.^alpha).^(1/2)+(1-delta)*K_3;
inbound K_4_next  0 ((2/phi)*z_agg.*z_ind_4.*K_4.^alpha).^(1/2)+(1-delta)*K_4;
inbound K_5_next  0 ((2/phi)*z_agg.*z_ind_5.*K_5.^alpha).^(1/2)+(1-delta)*K_5;



model;
  % Budget constraints
  y_1 =  z_agg*z_ind_1 * K_1^alpha;
  y_2 =  z_agg*z_ind_2 * K_2^alpha;
  y_3 =  z_agg*z_ind_3 * K_3^alpha;
  y_4 =  z_agg*z_ind_4 * K_4^alpha;
  y_5 =  z_agg*z_ind_5 * K_5^alpha;
  c_1 = (1-s_1) * y_1;
  c_2 = (1-s_2) * y_2;
  c_3 = (1-s_3) * y_3;
  c_4 = (1-s_4) * y_4;
  c_5 = (1-s_5) * y_5;  
  u_1_prime = c_1^(-sigma);
  u_2_prime = c_2^(-sigma);
  u_3_prime = c_3^(-sigma);
  u_4_prime = c_4^(-sigma);
  u_5_prime = c_5^(-sigma);
  i_exp_1 = s_1 * y_1
  i_exp_2 = s_2 * y_2
  i_exp_3 = s_3 * y_3
  i_exp_4 = s_4 * y_4
  i_exp_5 = s_5 * y_5
  i_exp_tot = s_1*y_1 + s_2*y_2 + s_3*y_3 + s_4*y_4 + s_5*y_5
  i_tot = ((2/phi) * i_exp_tot)^(1/2)
  i_1 = i_tot * i_exp_1 / i_exp_tot;
  i_2 = i_tot * i_exp_2 / i_exp_tot;
  i_3 = i_tot * i_exp_3 / i_exp_tot;
  i_4 = i_tot * i_exp_4 / i_exp_tot;
  i_5 = i_tot * i_exp_5 / i_exp_tot;


  % Evaluate the interpolation object to get future variables
  s_1_future' = s_1_interp'(K_1_next,K_2_next,K_3_next,K_4_next,K_5_next);
  s_2_future' = s_2_interp'(K_1_next,K_2_next,K_3_next,K_4_next,K_5_next);
  s_3_future' = s_3_interp'(K_1_next,K_2_next,K_3_next,K_4_next,K_5_next);
  s_4_future' = s_4_interp'(K_1_next,K_2_next,K_3_next,K_4_next,K_5_next);
  s_5_future' = s_5_interp'(K_1_next,K_2_next,K_3_next,K_4_next,K_5_next);
  y_1_future' = z_agg'*z_ind_1' * K_1_next^alpha;
  y_2_future' = z_agg'*z_ind_2' * K_2_next^alpha;
  y_3_future' = z_agg'*z_ind_3' * K_3_next^alpha;
  y_4_future' = z_agg'*z_ind_4' * K_4_next^alpha;
  y_5_future' = z_agg'*z_ind_5' * K_5_next^alpha;
  c_1_future' = (1-s_1_future') * y_1_future';
  c_2_future' = (1-s_2_future') * y_2_future';
  c_3_future' = (1-s_3_future') * y_3_future';
  c_4_future' = (1-s_4_future') * y_4_future';
  c_5_future' = (1-s_5_future') * y_5_future';
  u_1_prime_future' = c_1_future'^(-sigma);
  u_2_prime_future' = c_2_future'^(-sigma);
  u_3_prime_future' = c_3_future'^(-sigma);
  u_4_prime_future' = c_4_future'^(-sigma);
  u_5_prime_future' = c_5_future'^(-sigma);
  i_exp_1_future' = s_1_future' * y_1_future';
  i_exp_2_future' = s_2_future' * y_2_future';
  i_exp_3_future' = s_3_future' * y_3_future';
  i_exp_4_future' = s_4_future' * y_4_future';
  i_exp_5_future' = s_5_future' * y_5_future';
 
  i_exp_tot_future' = i_exp_1_future' + i_exp_2_future' + i_exp_3_future' + i_exp_4_future' + i_exp_5_future';
  i_tot_future' = ((2/phi) * i_exp_tot_future')^(1/2);
  i_1_future' = i_tot_future' * i_exp_1_future' / i_exp_tot_future'
  i_2_future' = i_tot_future' * i_exp_2_future' / i_exp_tot_future'
  i_3_future' = i_tot_future' * i_exp_3_future' / i_exp_tot_future'
  i_4_future' = i_tot_future' * i_exp_4_future' / i_exp_tot_future'
  i_5_future' = i_tot_future' * i_exp_5_future' / i_exp_tot_future'
  
  kret_1_next' = alpha * y_1_future'/K_1_next + (1-delta) * phi * i_tot_future' / (2-i_1_future'/i_tot_future') ;
  kret_2_next' = alpha * y_2_future'/K_2_next + (1-delta) * phi * i_tot_future' / (2-i_2_future'/i_tot_future') ;
  kret_3_next' = alpha * y_3_future'/K_3_next + (1-delta) * phi * i_tot_future' / (2-i_3_future'/i_tot_future') ;
  kret_4_next' = alpha * y_4_future'/K_4_next + (1-delta) * phi * i_tot_future' / (2-i_4_future'/i_tot_future') ;
  kret_5_next' = alpha * y_5_future'/K_5_next + (1-delta) * phi * i_tot_future' / (2-i_5_future'/i_tot_future') ;

  
  % Calculate residual of the equation
  euler_residual_1 = phi* i_tot/(2-i_1/i_tot) - beta*GDSGE_EXPECT{u_1_prime_future' * kret_1_next'}/u_1_prime;
  euler_residual_2 = phi* i_tot/(2-i_2/i_tot) - beta*GDSGE_EXPECT{u_2_prime_future' * kret_2_next'}/u_2_prime;
  euler_residual_3 = phi* i_tot/(2-i_3/i_tot) - beta*GDSGE_EXPECT{u_3_prime_future' * kret_3_next'}/u_3_prime;
  euler_residual_4 = phi* i_tot/(2-i_4/i_tot) - beta*GDSGE_EXPECT{u_4_prime_future' * kret_4_next'}/u_4_prime;
  euler_residual_5 = phi* i_tot/(2-i_5/i_tot) - beta*GDSGE_EXPECT{u_5_prime_future' * kret_5_next'}/u_5_prime;
  budget_1 = i_1 + (1-delta)*K_1 - K_1_next;
  budget_2 = i_2 + (1-delta)*K_2 - K_2_next;
  budget_3 = i_3 + (1-delta)*K_3 - K_3_next;
  budget_4 = i_4 + (1-delta)*K_4 - K_4_next;
  budget_5 = i_5 + (1-delta)*K_5 - K_5_next;
 
  
  equations;
    euler_residual_1;
    euler_residual_2;
    euler_residual_3;
    euler_residual_4;
    euler_residual_5;
    budget_1;
    budget_2;
    budget_3;
    budget_4;
    budget_5;
  end;
end;

simulate;
  num_periods = 10000;
  num_samples = 6;
  initial K_1 Kss;
  initial K_2 Kss;
  initial K_3 Kss;
  initial K_4 Kss;
  initial K_5 Kss;
  initial shock 1;
  var_simu s_1 s_2 s_3 s_4 s_5 K_1 K_2 K_3 K_4 K_5;
  K_1' = K_1_next;
  K_2' = K_2_next;
  K_3' = K_3_next;
  K_4' = K_4_next;
  K_5' = K_5_next;
end;
